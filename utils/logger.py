"""–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
import sys
from pathlib import Path
from typing import TYPE_CHECKING
from loguru import logger

if TYPE_CHECKING:
    from config.settings import Settings


def setup_logger(settings) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Args:
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loguru
    logger.remove()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = (
        "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
        "<level>{message}</level>"
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.add(
        sys.stdout,
        format=log_format,
        level=settings.log_level,
        colorize=True,
        backtrace=True,
        diagnose=True
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ–±—â–∏–π –ª–æ–≥
    logger.add(
        log_dir / settings.log_file,
        format=log_format,
        level=settings.log_level,
        rotation="100 MB",
        retention="30 days",
        compression="zip",
        backtrace=True,
        diagnose=True
    )
    
    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
    logger.add(
        log_dir / "errors.log",
        format=log_format,
        level="ERROR",
        rotation="50 MB",
        retention="60 days",
        compression="zip",
        backtrace=True,
        diagnose=True
    )
    
    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
    logger.add(
        log_dir / "trading_decisions.log",
        format=log_format,
        level="INFO",
        rotation="50 MB",
        retention="90 days",
        compression="zip",
        filter=lambda record: "TRADING" in record["extra"].get("category", ""),
        backtrace=False,
        diagnose=False
    )
    
    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–≤–µ—Ç—ã OpenAI
    logger.add(
        log_dir / "openai_responses.log",
        format=log_format,
        level="INFO",
        rotation="50 MB",
        retention="30 days",
        compression="zip",
        filter=lambda record: "ü§ñ OPENAI" in record["message"] or "üìù –°–´–†–û–ô –û–¢–í–ï–¢" in record["message"] or "‚úÖ –†–ê–°–ü–ê–†–°–ï–ù–ù–´–ô JSON" in record["message"],
        backtrace=False,
        diagnose=False
    )
    
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –£—Ä–æ–≤–µ–Ω—å: {settings.log_level}")


def get_trading_logger():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ —Å –º–µ—Ç–∫–æ–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    return logger.bind(category="TRADING")


def log_trading_decision(decision_type: str, details: str) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
    
    Args:
        decision_type: –¢–∏–ø —Ä–µ—à–µ–Ω–∏—è (buy, sell, cancel, pause)
        details: –î–µ—Ç–∞–ª–∏ —Ä–µ—à–µ–Ω–∏—è
    """
    trading_logger = get_trading_logger()
    trading_logger.info(f"–†–ï–®–ï–ù–ò–ï: {decision_type.upper()} | {details}")


def log_api_call(endpoint: str, method: str, status_code: int, response_time: float) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç API –≤—ã–∑–æ–≤.
    
    Args:
        endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
        method: HTTP –º–µ—Ç–æ–¥
        status_code: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞
        response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    logger.info(
        f"API {method} {endpoint} | {status_code} | {response_time:.3f}s",
        extra={"category": "API"}
    )


def log_openai_interaction(prompt_type: str, tokens_used: int, response_time: float) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å OpenAI.
    
    Args:
        prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞ (initial, update)
        tokens_used: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    logger.info(
        f"OpenAI {prompt_type} | {tokens_used} tokens | {response_time:.3f}s",
        extra={"category": "OPENAI"}
    )


def log_market_data_update(symbol: str, price: float, volume: float) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        volume: –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    """
    logger.debug(
        f"MARKET {symbol} | Price: {price} | Volume: {volume}",
        extra={"category": "MARKET"}
    )
