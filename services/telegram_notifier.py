"""–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
import asyncio
from typing import Optional, Dict, Any
import httpx
from loguru import logger

from config.settings import Settings


class TelegramNotifier:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø–æ–∫—É–ø–∫–∞—Ö –∏ –æ—Ç–º–µ–Ω–∞—Ö –æ—Ä–¥–µ—Ä–æ–≤.
    """
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.settings = settings
        self.bot_token = "8498262007:AAHvGNPaZUwa-IAUorTLIpJPnZCIw8NAIyg"
        self.chat_id = "-4872990353"
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –∫–ª–∏–µ–Ω—Ç–∞
        timeout_config = httpx.Timeout(
            connect=5.0,
            read=10.0,
            write=5.0,
            pool=5.0
        )
        
        self.client = httpx.AsyncClient(
            timeout=timeout_config,
            headers={
                "Content-Type": "application/json",
                "User-Agent": "TradeBot/1.0.0"
            }
        )
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        await self.close()
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç."""
        await self.client.aclose()
        logger.info("Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
    
    async def send_message(self, text: str, parse_mode: str = "HTML") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}/sendMessage"
            
            data = {
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True
            }
            
            response = await self.client.post(url, json=data)
            response.raise_for_status()
            
            result = response.json()
            if result.get("ok"):
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {result}")
                return False
                
        except httpx.HTTPError as e:
            logger.error(f"üåê –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")
            return False
    
    async def notify_buy_order(
        self, 
        amount: float, 
        take_profit_percent: float, 
        stop_loss_percent: float,
        current_price: str,
        response: str
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø–æ–∫—É–ø–∫–µ BTC.
        
        Args:
            amount: –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –≤ USDT
            take_profit_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            stop_loss_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC
            response: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –ò–ò
        """
        text = f"""
üü¢ <b>–ü–û–ö–£–ü–ö–ê BTC</b>

üí∞ <b>–°—É–º–º–∞:</b> {amount:.2f} USDT
üìà <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price} USDT
üéØ <b>Take Profit:</b> {take_profit_percent}%
üõë <b>Stop Loss:</b> {stop_loss_percent}%

ü§ñ <b>–†–µ—à–µ–Ω–∏–µ –ò–ò:</b>
{response}

‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
        """.strip()
        
        await self.send_message(text)
    
    async def notify_cancel_order(
        self, 
        order_id: str, 
        response: str,
        order_details: Optional[Dict[str, Any]] = None
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞.
        
        Args:
            order_id: ID –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            response: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –ò–ò
            order_details: –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        text = f"""
üî¥ <b>–û–¢–ú–ï–ù–ê –û–†–î–ï–†–ê</b>

üÜî <b>ID –æ—Ä–¥–µ—Ä–∞:</b> {order_id}
        """.strip()
        
        if order_details:
            text += f"""
üìä <b>–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞:</b>
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {order_details.get('instId', 'N/A')}
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞: {order_details.get('side', 'N/A')}
‚Ä¢ –¶–µ–Ω–∞: {order_details.get('px', 'N/A')} USDT
‚Ä¢ –†–∞–∑–º–µ—Ä: {order_details.get('sz', 'N/A')} BTC
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {order_details.get('age_minutes', 'N/A')} –º–∏–Ω
            """.strip()
        
        text += f"""

ü§ñ <b>–†–µ—à–µ–Ω–∏–µ –ò–ò:</b>
{response}

‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
        """.strip()
        
        await self.send_message(text)
    
    async def notify_sell_after_cancel(
        self, 
        btc_amount: float, 
        response: str
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–µ BTC –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞.
        
        Args:
            btc_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ BTC
            response: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –ò–ò
        """
        text = f"""
üü° <b>–ü–†–û–î–ê–ñ–ê –ü–û–°–õ–ï –û–¢–ú–ï–ù–´</b>

üí∞ <b>–ü—Ä–æ–¥–∞–Ω–æ BTC:</b> {btc_amount:.8f} BTC

ü§ñ <b>–†–µ—à–µ–Ω–∏–µ –ò–ò:</b>
{response}

‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
        """.strip()
        
        await self.send_message(text)
    
    async def notify_sell_order(
        self, 
        btc_amount: float, 
        response: str
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–µ BTC.
        
        Args:
            btc_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ BTC
            response: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –ò–ò
        """
        text = f"""
üü° <b>–ü–†–û–î–ê–ñ–ê BTC</b>

üí∞ <b>–ü—Ä–æ–¥–∞–Ω–æ BTC:</b> {btc_amount:.8f} BTC

ü§ñ <b>–†–µ—à–µ–Ω–∏–µ –ò–ò:</b>
{response}

‚è∞ <b>–í—Ä–µ–º—è:</b> {self._get_current_time()}
        """.strip()
        
        await self.send_message(text)
    
    def _get_current_time(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        import datetime
        return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API.
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}/getMe"
            response = await self.client.get(url)
            response.raise_for_status()
            
            result = response.json()
            if result.get("ok"):
                bot_info = result.get("result", {})
                logger.info(f"‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'N/A')}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {result}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            return False
