"""–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º API."""
import asyncio
from typing import Dict, Any, Optional
import httpx
from loguru import logger

from config.settings import Settings
from models.trading import MarketData


class TradingAPIClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ—Ä–≥–æ–≤—ã–º API.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.settings = settings
        self.base_url = settings.trading_api_base_url
        self.demo_mode = settings.demo_mode
        self.timeout = 30.0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        timeout_config = httpx.Timeout(
            connect=10.0,   # –í—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            read=60.0,      # –í—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
            write=10.0,     # –í—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
            pool=5.0        # –í—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        )
        
        self.client = httpx.AsyncClient(
            timeout=timeout_config,
            headers={
                "Content-Type": "application/json",
                "User-Agent": "TradeBot/1.0.0"
            }
        )
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω API –∫–ª–∏–µ–Ω—Ç –¥–ª—è {self.base_url}")
        logger.info(f"‚è±Ô∏è –¢–ê–ô–ú–ê–£–¢–´: connect={timeout_config.connect}s, read={timeout_config.read}s, write={timeout_config.write}s")
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥."""
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥."""
        await self.close()
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç."""
        await self.client.aclose()
        logger.info("API –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
    
    async def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict[str, Any]] = None,
        json_data: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API.
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, etc.)
            endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
            params: URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            json_data: JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
            
        Raises:
            httpx.HTTPError: –ü—Ä–∏ –æ—à–∏–±–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
        """
        url = f"{self.base_url}{endpoint}"
        
        try:
            logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {method} –∑–∞–ø—Ä–æ—Å –∫ {url}")
            
            response = await self.client.request(
                method=method,
                url=url,
                params=params,
                json=json_data
            )
            
            response.raise_for_status()
            data = response.json()
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {url}: {response.status_code}")
            return data
            
        except httpx.RemoteProtocolError as e:
            logger.error(f"üîå –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø: —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {url}: {e}")
            logger.info("üí° –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            raise
        except httpx.TimeoutException as e:
            logger.error(f"‚è±Ô∏è –¢–ê–ô–ú–ê–£–¢ –ó–ê–ü–†–û–°–ê –∫ {url}: {e}")
            logger.info("üí° –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.")
            raise
        except httpx.HTTPError as e:
            logger.error(f"üåê –û–®–ò–ë–ö–ê HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            raise
    
    async def get_health(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ API.
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ API
        """
        return await self._make_request("GET", "/api/v1/health")
    
    async def get_market_analytics(self) -> MarketData:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 3 –º–µ—Å—è—Ü–∞).
        
        Returns:
            –ü–æ–ª–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏
        """
        params = {"demo": str(self.demo_mode).lower()}
        
        # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        max_retries = 3
        for attempt in range(max_retries):
            try:
                data = await self._make_request("GET", "/api/v1/market/analytics", params=params)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {data.get('inst_id', 'N/A')}")
                return MarketData(**data)
                
            except (httpx.RemoteProtocolError, httpx.TimeoutException) as e:
                if attempt < max_retries - 1:
                    wait_time = (attempt + 1) * 5  # 5, 10, 15 —Å–µ–∫—É–Ω–¥
                    logger.warning(f"üîÑ –ü–û–í–¢–û–† {attempt + 1}/{max_retries} —á–µ—Ä–µ–∑ {wait_time}s –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {e}")
                    await asyncio.sleep(wait_time)
                    continue
                else:
                    logger.error(f"‚ùå –í–°–ï –ü–û–ü–´–¢–ö–ò ({max_retries}) –ò–°–ß–ï–†–ü–ê–ù–´ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
                    raise
    
    async def get_market_monitor(self) -> MarketData:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π).
        
        Returns:
            –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        params = {"demo": str(self.demo_mode).lower()}
        data = await self._make_request("GET", "/api/v1/market/monitor", params=params)
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {data.get('inst_id', 'N/A')}")
        return MarketData(**data)
    
    async def place_buy_order(
        self, 
        amount: float, 
        take_profit_percent: float, 
        stop_loss_percent: float
    ) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É.
        
        Args:
            amount: –°—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ USDT
            take_profit_percent: Take Profit –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            stop_loss_percent: Stop Loss –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        """
        json_data = {
            "buy_amount": amount,
            "take_profit_percent": take_profit_percent,
            "stop_loss_percent": stop_loss_percent,
            "demo": self.demo_mode
        }
        
        logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {amount} USDT, TP: {take_profit_percent}%, SL: {stop_loss_percent}%")
        return await self._make_request("POST", "/api/v1/orders/buy", json_data=json_data)
    
    async def place_sell_order(self, amount: float) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
        
        Args:
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        """
        json_data = {
            "sell_amount": amount,
            "demo": self.demo_mode
        }
        
        logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {amount} BTC")
        return await self._make_request("POST", "/api/v1/orders/sell", json_data=json_data)
    
    async def cancel_order(self, order_id: str) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä.
        
        Args:
            order_id: ID –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
        """
        json_data = {
            "order_id": order_id,
            "demo": self.demo_mode
        }
        
        logger.info(f"–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: {order_id}")
        return await self._make_request("POST", "/api/v1/orders/cancel", json_data=json_data)
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API.
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            await self.get_health()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            return False
