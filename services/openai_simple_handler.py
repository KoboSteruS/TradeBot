"""–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI —Å Responses API."""
import json
import asyncio
from typing import Dict, Any, List, Optional
import openai
from loguru import logger

from config.settings import Settings
from models.trading import MarketData


class OpenAISimpleHandler:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI —á–µ—Ä–µ–∑ Responses API.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Ç-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ Assistants API.
    """
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.settings = settings
        self.client = openai.OpenAI(api_key=settings.openai_api_key)
        self.model = settings.openai_model
        self.conversation_history: List[Dict[str, str]] = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        self.last_successful_response: Optional[str] = None
        self.retry_count = 0
        self.max_retries = 3
        self.retry_delay = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π OpenAI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
    
    def get_trader_prompt(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞.
        
        Returns:
            –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        return f"""–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –ø–æ –ø–∞—Ä–µ BTC-USDT.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–∏–º —É—Å–ª–æ–≤–∏—è–º –∏ –≤–µ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª—é —Ç–∞–∫, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö.
–¢—ã –¥–µ–π—Å—Ç–≤—É–µ—à—å –Ω–µ –∫–∞–∫ –∂—ë—Å—Ç–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç, –∞ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä: –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Å–ª–µ–¥–∏—à—å –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º, –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ —Ä–µ–∞–∫—Ü–∏–µ–π —Ä—ã–Ω–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

–¶–ï–õ–¨:
target_apy = {self.settings.target_apy}  # —Ü–µ–ª–µ–≤–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ %

–ê–õ–ì–û–†–ò–¢–ú –†–ê–ë–û–¢–´:
1. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –ø–µ—Ä–µ–¥–∞—é –∏—Å—Ç–æ—Ä–∏—é —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
   - 5m: 144 –±–∞—Ä–æ–≤
   - 15m: 96 –±–∞—Ä–æ–≤  
   - 1h: 72 –±–∞—Ä–∞
   - 4h: 90 –±–∞—Ä–æ–≤
   - 1d: 90 –±–∞—Ä–æ–≤
   –ü–ª—é—Å: —Å—Ç–∞–∫–∞–Ω (—Ç–æ–ø-20 bid/ask —Å –æ–±—ä—ë–º–∞–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏), –±–∞–ª–∞–Ω—Å, –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞.
   –¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –¥–∞–Ω–Ω—ã–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω—É –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.

2. –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —è –ø–µ—Ä–µ–¥–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
   - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π (OHLCV —Å timestamp);
   - –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞–∫–∞–Ω (—Ç–æ–ø-20 bid/ask, –æ–±—ä—ë–º—ã, –∏–∑–º–µ–Ω–µ–Ω–∏—è);
   - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å;
   - –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞.
   –¢—ã –æ–±–Ω–æ–≤–ª—è–µ—à—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—à—å –≤—Å–µ —Å—Ç–∞—Ä—à–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (5m, 15m, 1h, 4h, 1d), –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD, SMA, EMA, ATR –∏ —Ç.–¥.) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—à—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.

–†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π):
- –°–∞–º –ø–æ–¥–±–∏—Ä–∞–µ—à—å —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É, RRR, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫, –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞ –∏ —Ü–µ–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏.
- –í –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —Å–Ω–∏–∂–∞–µ—à—å —Ä–∏—Å–∫, –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ ‚Äî –º–æ–∂–µ—à—å —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å.
- –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å —Ç–æ—Ä–≥–æ–≤–ª—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤—É–µ—à—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—ë–º–∞–º–∏.

–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê:
- –°–º–æ—Ç—Ä–∏—à—å –Ω–∞ —Ç—Ä–µ–Ω–¥—ã –ø–æ —Ä–∞–∑–Ω—ã–º –¢–§, –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏, —Ä–µ–∞–∫—Ü–∏—é –≤ —Å—Ç–∞–∫–∞–Ω–µ, –æ–±—ä—ë–º—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR), –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.
- –£—á–∏—Ç—ã–≤–∞–µ—à—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ (risk-on/risk-off), –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏, –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è.
- –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å —Å–¥–µ–ª–∫—É –∏ –æ–±—ä—è—Å–Ω—è–µ—à—å –ø—Ä–∏—á–∏–Ω—É.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–¢–´ –î–û–õ–ñ–ï–ù –û–¢–í–ï–ß–ê–¢–¨ –¢–û–õ–¨–ö–û –û–î–ù–ò–ú –ò–ó 4 –î–û–ü–£–°–¢–ò–ú–´–• –°–¢–ê–¢–£–°–û–í!

–î–û–ü–£–°–¢–ò–ú–´–ï –°–¢–ê–¢–£–°–´: pause, buy, sell, cancel
–ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –°–¢–ê–¢–£–°–´: strategy, analysis, hold, wait, thinking - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô!

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:

–î–ª—è –ø–∞—É–∑—ã (–∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç —Ö–æ—Ä–æ—à–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏):
{{
  "status": "pause",
  "response": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω–∞ –ø–∞—É–∑–∞"
}}

–î–ª—è –ø–æ–∫—É–ø–∫–∏ (–∫–æ–≥–¥–∞ –≤–∏–¥–∏—à—å —Ö–æ—Ä–æ—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞):
{{
  "status": "buy", 
  "response": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "buy_amount": —á–∏—Å–ª–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ_–≤_USDT,
  "take_profit_percent": –ø—Ä–æ—Ü–µ–Ω—Ç_—Ç–µ–π–∫_–ø—Ä–æ—Ñ–∏—Ç–∞,
  "stop_loss_percent": –ø—Ä–æ—Ü–µ–Ω—Ç_—Å—Ç–æ–ø_–ª–æ—Å—Å–∞
}}

–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é):
{{
  "status": "sell",
  "response": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è", 
  "sell_amount": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_BTC_–¥–ª—è_–ø—Ä–æ–¥–∞–∂–∏
}}

–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ (–∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä):
{{
  "status": "cancel",
  "response": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "order_id": "ID_–æ—Ä–¥–µ—Ä–∞_–¥–ª—è_–æ—Ç–º–µ–Ω—ã"
}}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û —Å—Ç–∞—Ç—É—Å—ã: pause, buy, sell, cancel
- –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ç–∏–ø–∞ "strategy" –∏–ª–∏ "analysis" 
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!
- –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è - –∏—Å–ø–æ–ª—å–∑—É–π "pause"!"""
    
    async def _handle_region_error(self) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Ä–µ–≥–∏–æ–Ω–∞, –∂–¥–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç.
        
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        """
        self.retry_count += 1
        
        if self.retry_count > self.max_retries:
            logger.error(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({self.max_retries})")
            return None
        
        logger.warning(f"üåç –û–®–ò–ë–ö–ê –†–ï–ì–ò–û–ù–ê: –ø–æ–ø—ã—Ç–∫–∞ {self.retry_count}/{self.max_retries}")
        
        if self.last_successful_response:
            logger.info(f"‚ôªÔ∏è –í–û–ó–í–†–ê–©–ê–Æ –ü–û–°–õ–ï–î–ù–ï–ï –£–°–ü–ï–®–ù–û–ï –†–ï–®–ï–ù–ò–ï: {self.last_successful_response}")
            return self.last_successful_response
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
            fallback_response = {
                "status": "pause",
                "response": f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ OpenAI, –æ–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay//60} –º–∏–Ω—É—Ç (–ø–æ–ø—ã—Ç–∫–∞ {self.retry_count}/{self.max_retries})"
            }
            fallback_json = json.dumps(fallback_response, ensure_ascii=False)
            logger.info(f"‚è∏Ô∏è FALLBACK –†–ï–®–ï–ù–ò–ï: {fallback_json}")
            return fallback_json
    
    async def _wait_and_retry(self) -> None:
        """–ñ–¥–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π."""
        logger.info(f"‚è∞ –û–ñ–ò–î–ê–ù–ò–ï {self.retry_delay} —Å–µ–∫—É–Ω–¥ ({self.retry_delay//60} –º–∏–Ω—É—Ç)...")
        await asyncio.sleep(self.retry_delay)
    
    def _is_valid_response(self, response: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å.
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç OpenAI
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            import json
            data = json.loads(response.strip())
            status = data.get('status', '').lower()
            valid_statuses = ['pause', 'buy', 'sell', 'cancel']
            return status in valid_statuses
        except:
            return False
    
    async def get_trading_decision(self, market_data: MarketData, is_initial: bool = False) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç OpenAI.
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            is_initial: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π) –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
        Returns:
            JSON –æ—Ç–≤–µ—Ç —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if is_initial:
                message = self._prepare_initial_message(market_data)
                logger.info("üìä –û–¢–ü–†–ê–í–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –í OPENAI")
            else:
                message = self._prepare_update_message(market_data)
                logger.info("üîÑ –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–• –í OPENAI")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –æ–Ω–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ)
            logger.debug(f"üìè –†–ê–ó–ú–ï–† –°–û–û–ë–©–ï–ù–ò–Ø: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "user",
                "content": message
            })
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": self.get_trader_prompt()}
            ] + self.conversation_history
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=0.1,
                max_tokens=500
            )
            
            assistant_response = response.choices[0].message.content
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            if response.usage:
                logger.info(f"üí∞ –¢–û–ö–ï–ù–´: input={response.usage.prompt_tokens}, output={response.usage.completion_tokens}, total={response.usage.total_tokens}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            logger.info(f"ü§ñ OPENAI –ü–û–õ–ù–´–ô –û–¢–í–ï–¢: {assistant_response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
            if not self._is_valid_response(assistant_response):
                logger.warning("üîÑ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢, –ü–†–û–ë–£–Æ –ï–©–ï –†–ê–ó...")
                # –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                clarification = "–í–ù–ò–ú–ê–ù–ò–ï! –¢–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û: pause, buy, sell, cancel. –î–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
                self.conversation_history.append({
                    "role": "user", 
                    "content": clarification
                })
                
                # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                messages = [
                    {"role": "system", "content": self.get_trader_prompt()}
                ] + self.conversation_history
                
                retry_response = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    temperature=0.1,
                    max_tokens=200
                )
                
                assistant_response = retry_response.choices[0].message.content
                logger.info(f"üîÑ –ü–û–í–¢–û–†–ù–´–ô –û–¢–í–ï–¢ OPENAI: {assistant_response}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.last_successful_response = assistant_response
            self.retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": assistant_response
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.conversation_history) > 10:
                self.conversation_history = self.conversation_history[-10:]
            
            logger.success("‚úÖ –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            return assistant_response
            
        except openai.PermissionDeniedError as e:
            if "unsupported_country_region_territory" in str(e):
                logger.error(f"üåç –û–®–ò–ë–ö–ê –†–ï–ì–ò–û–ù–ê OpenAI: {e}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ä–µ–≥–∏–æ–Ω–∞
                fallback_response = await self._handle_region_error()
                if fallback_response:
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await self._wait_and_retry()
                    return fallback_response
                else:
                    raise
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ OpenAI: {e}")
                raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –æ—Ç OpenAI: {e}")
            raise
    
    def _prepare_initial_message(self, market_data: MarketData) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        
        Args:
            market_data: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI
        """
        return f"""–ù–ê–ß–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:

–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {market_data.inst_id}
–í—Ä–µ–º—è: {market_data.timestamp}

–†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:
{json.dumps(market_data.market_data, ensure_ascii=False, indent=2)}

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–ê–ù–ù–´–ï:
–ë–∞–ª–∞–Ω—Å USDT: {market_data.user_data.balances.USDT}
–ë–∞–ª–∞–Ω—Å BTC: {market_data.user_data.balances.BTC}
–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(market_data.user_data.active_orders)}

–ò–ù–î–ò–ö–ê–¢–û–†–´:
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {market_data.indicators.current_price}
–û–±—ä–µ–º 24—á: {market_data.indicators.volume_24h}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.indicators.change_24h}%
–ú–∞–∫—Å–∏–º—É–º 24—á: {market_data.indicators.high_24h}
–ú–∏–Ω–∏–º—É–º 24—á: {market_data.indicators.low_24h}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    
    def _prepare_update_message(self, market_data: MarketData) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        
        Args:
            market_data: –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI
        """
        return f"""–û–ë–ù–û–í–õ–ï–ù–ò–ï –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•:

–í—Ä–µ–º—è: {market_data.timestamp}

–°–¢–ê–ö–ê–ù –û–†–î–ï–†–û–í:
{json.dumps(market_data.market_data.get('orderbook', []), ensure_ascii=False, indent=2)}

–ü–û–°–õ–ï–î–ù–ò–ï –°–í–ï–ß–ò (1m):
{json.dumps(market_data.market_data.get('candles', {}).get('1m', [])[:10], ensure_ascii=False, indent=2)}

–ë–ê–õ–ê–ù–°:
USDT: {market_data.user_data.balances.USDT}
BTC: {market_data.user_data.balances.BTC}

–ê–ö–¢–ò–í–ù–´–ï –û–†–î–ï–†–ê:
{json.dumps(market_data.user_data.active_orders, ensure_ascii=False, indent=2)}

–¢–ï–ö–£–©–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:
–¶–µ–Ω–∞: {market_data.indicators.current_price}
–û–±—ä–µ–º 24—á: {market_data.indicators.volume_24h}

–û–±–Ω–æ–≤–∏ —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–º–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    
    async def send_initial_data(self, market_data: MarketData) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
        
        Args:
            market_data: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            
        Returns:
            JSON –æ—Ç–≤–µ—Ç —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
        """
        return await self.get_trading_decision(market_data, is_initial=True)
    
    async def send_update_data(self, market_data: MarketData) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.
        
        Args:
            market_data: –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            
        Returns:
            JSON –æ—Ç–≤–µ—Ç —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
        """
        return await self.get_trading_decision(market_data, is_initial=False)
    
    def get_status(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        return {
            "retry_count": self.retry_count,
            "max_retries": self.max_retries,
            "has_last_response": self.last_successful_response is not None,
            "conversation_length": len(self.conversation_history)
        }
    
    def reset_retry_state(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
        self.retry_count = 0
        logger.info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–±—Ä–æ—à–µ–Ω–æ")
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."""
        logger.info("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π OpenAI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
