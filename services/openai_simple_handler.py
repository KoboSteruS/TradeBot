"""–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI —Å Responses API."""
import json
import asyncio
import time
from typing import Dict, Any, List, Optional
import openai
from loguru import logger

from config.settings import Settings
from models.trading import MarketData


class OpenAISimpleHandler:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI —á–µ—Ä–µ–∑ Responses API.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Ç-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ Assistants API.
    """
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.settings = settings
        self.client = openai.OpenAI(api_key=settings.openai_api_key)
        self.model = settings.openai_model
        self.conversation_history: List[Dict[str, str]] = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        self.last_successful_response: Optional[str] = None
        self.retry_count = 0
        self.max_retries = 3
        self.retry_delay = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self._request_in_progress = False
        self._last_request_timestamp = 0
        self._min_request_interval = 5  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self._request_lock = asyncio.Lock()
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π OpenAI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
    
    def get_trader_prompt(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
        
        Returns:
            –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        return f"""–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –ø–æ –ø–∞—Ä–µ BTC-USDT.  
–¶–µ–ª—å ‚Äî –¥–æ—Å—Ç–∏—á—å –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ {self.settings.target_apy}% –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö.  
–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ä—ã–Ω–æ–∫, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—à—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –¢—ã –Ω–µ —Ä–æ–±–æ—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏, –∞ —Ç—Ä–µ–π–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–∏–º —É—Å–ª–æ–≤–∏—è–º.

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ–∫ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º: 5m, 15m, 1h, 4h, 1d.  
- –ò—Å–ø–æ–ª—å–∑—É–π RSI, SMA20/50, MACD, ATR, –æ–±—ä—ë–º—ã, —Å—Ç–∞–∫–∞–Ω, —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.  
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ 5‚Äì60 –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥: –í–í–ï–†–•, –í–ù–ò–ó –∏–ª–∏ –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û.  
- –ü–æ–∫—É–ø–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ "–í–í–ï–†–•".  
- –í—Å–µ —Å–¥–µ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å SL –∏ TP, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏.  

### –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
- –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 1‚Äì2% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞).  
- –†–∏—Å–∫ –Ω–∞ —Å–µ—Ä–∏—é —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π: –Ω–µ –±–æ–ª–µ–µ 5‚Äì6% –∫–∞–ø–∏—Ç–∞–ª–∞.  
- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å (RRR) ‚â• 1:2.  
- –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ –Ω–µ –¥–∞—ë—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è RRR ‚â• 1:2 ‚Üí –ø–∞—É–∑–∞, —Å–¥–µ–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è.  
- –û—à–∏–±–∫–∏ –∏ —É–±—ã—Ç–∫–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–∏—Å–∫: –µ—Å–ª–∏ —Å–µ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —É–±—ã—Ç–æ—á–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤.  

### –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–∏—Å–∫ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π SL:  
  —Ä–∏—Å–∫_USDT = –±–∞–ª–∞–Ω—Å * (—Ä–∏—Å–∫% / 100)  
  —Ä–∞–∑–º–µ—Ä_—Å–¥–µ–ª–∫–∏ = —Ä–∏—Å–∫_USDT / (SL% –≤ —Ü–µ–Ω–µ)  
- –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Ä–∏—Å–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ %, –∞ —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Ä—ã–Ω–æ–∫.  

### TP –∏ SL (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ)
- SL: –∑–∞ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–¥–ª—è –ª–æ–Ω–≥–∞) –ª–∏–±–æ = 1‚Äì1.5√óATR.  
- TP: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã RRR ‚â• 1:2, –ª–∏–±–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –º–æ–∂–µ—Ç –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –≤—ã—à–µ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è.  
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–π SL –≤–≤–µ—Ä—Ö (—Ç—Ä–µ–π–ª–∏–Ω–≥) –∏ –ø–æ–¥–Ω–∏–º–∞–π TP. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 50% –æ—Ç TP —Ñ–∏–∫—Å–∏—Ä—É–π 50% –ø–æ–∑–∏—Ü–∏–∏ (—á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞).  

### –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
- –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –∏–¥—ë—Ç –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞.  
- –ö–∞–∂–¥–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–∏—Å–∫: —Å–æ–≤–æ–∫—É–ø–Ω—ã–π —Ä–∏—Å–∫ —Å–µ—Ä–∏–∏ ‚â§ 5‚Äì6% –∫–∞–ø–∏—Ç–∞–ª–∞.  
- –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å—Ç—É—â—É—é –ø–æ–∑–∏—Ü–∏—é) –¥–æ–ø—É—Å—Ç–∏–º–æ –ø—Ä–∏ —É—Å–∏–ª–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞.  

### –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
- –°–ª–∞–±—ã–π (RSI 30‚Äì40, —Å–ª–∞–±—ã–π –æ–±—ä—ë–º) ‚Üí —Ä–∏—Å–∫ 1%  
- –°—Ä–µ–¥–Ω–∏–π (RSI <30, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Ç—Ä–µ–Ω–¥) ‚Üí —Ä–∏—Å–∫ 1.5%  
- –°–∏–ª—å–Ω—ã–π (RSI <25, –æ–±—ä—ë–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, SMA20 > SMA50) ‚Üí —Ä–∏—Å–∫ 2%  
- –û—Ç–ª–∏—á–Ω—ã–π (RSI <20 + —É—Ä–æ–≤–Ω–∏ + –æ–±—ä—ë–º) ‚Üí —Ä–∏—Å–∫ 2% –∏ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö  

### –õ–æ–≥–∏–∫–∞ SELL
- –ü—Ä–æ–¥–∞–∂–∞ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é TP –∏–ª–∏ SL.  
- –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏ +50% TP.  
- –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –í–ù–ò–ó.  
- –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ TP/SL –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–¥–µ–ª–∫–∏ (—Ç—Ä–µ–π–ª–∏–Ω–≥ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è).  

### –†–µ–∂–∏–º –ø–∞—É–∑—ã
- –ü—Ä–æ–≥–Ω–æ–∑ = –í–ù–ò–ó ‚Üí –ø–∞—É–∑–∞.  
- –ü—Ä–æ–≥–Ω–æ–∑ = –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û ‚Üí –ø–∞—É–∑–∞, –ª–∏–±–æ —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤.  
- –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è RRR ‚â• 1:2 ‚Üí –ø–∞—É–∑–∞.  

### –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –ë–ï–ó markdown —Ä–∞–∑–º–µ—Ç–∫–∏, –ë–ï–ó ```json```, –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

PAUSE:
{{"status": "pause", "response": "–ü–†–û–ì–ù–û–ó: [–í–í–ï–†–•/–í–ù–ò–ó/–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û] - –ø—Ä–∏—á–∏–Ω–∞ –ø–∞—É–∑—ã"}}

BUY:
{{"status": "buy", "response": "–ü–†–û–ì–ù–û–ó: –í–í–ï–†–• - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞", "buy_amount": —á–∏—Å–ª–æ_USDT, "take_profit_percent": —á–∏—Å–ª–æ_–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, "stop_loss_percent": —á–∏—Å–ª–æ_–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤}}

SELL:
{{"status": "sell", "response": "–ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", "sell_amount": —á–∏—Å–ª–æ_BTC}}

CANCEL:
{{"status": "cancel", "response": "–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã", "order_id": "ID_–æ—Ä–¥–µ—Ä–∞"}}

–î–û–ü–£–°–¢–ò–ú–´–ï –°–¢–ê–¢–£–°–´: "pause", "buy", "sell", "cancel"
–ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –°–¢–ê–¢–£–°–´: "strategy", "analysis", "hold", "wait"

–ù–ï –î–û–ë–ê–í–õ–Ø–ô ```json``` –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ä—ã! –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON!"""
    
    async def _handle_region_error(self) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Ä–µ–≥–∏–æ–Ω–∞, –∂–¥–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç.
        
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        """
        self.retry_count += 1
        
        if self.retry_count > self.max_retries:
            logger.error(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({self.max_retries})")
            return None
        
        logger.warning(f"üåç –û–®–ò–ë–ö–ê –†–ï–ì–ò–û–ù–ê: –ø–æ–ø—ã—Ç–∫–∞ {self.retry_count}/{self.max_retries}")
        
        if self.last_successful_response:
            logger.info(f"‚ôªÔ∏è –í–û–ó–í–†–ê–©–ê–Æ –ü–û–°–õ–ï–î–ù–ï–ï –£–°–ü–ï–®–ù–û–ï –†–ï–®–ï–ù–ò–ï: {self.last_successful_response}")
            return self.last_successful_response
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ
            fallback_response = {
                "status": "pause",
                "response": f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ OpenAI, –æ–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay//60} –º–∏–Ω—É—Ç (–ø–æ–ø—ã—Ç–∫–∞ {self.retry_count}/{self.max_retries})"
            }
            fallback_json = json.dumps(fallback_response, ensure_ascii=False)
            logger.info(f"‚è∏Ô∏è FALLBACK –†–ï–®–ï–ù–ò–ï: {fallback_json}")
            return fallback_json
    
    async def _wait_and_retry(self) -> None:
        """–ñ–¥–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π."""
        logger.info(f"‚è∞ –û–ñ–ò–î–ê–ù–ò–ï {self.retry_delay} —Å–µ–∫—É–Ω–¥ ({self.retry_delay//60} –º–∏–Ω—É—Ç)...")
        await asyncio.sleep(self.retry_delay)
    
    def _is_valid_response(self, response: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å.
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç OpenAI
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            import json
            data = json.loads(response.strip())
            status = data.get('status', '').lower()
            valid_statuses = ['pause', 'buy', 'sell', 'cancel']
            return status in valid_statuses
        except:
            return False
    
    async def get_trading_decision(self, market_data: MarketData, is_initial: bool = False) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç OpenAI —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            is_initial: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π) –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
        Returns:
            JSON –æ—Ç–≤–µ—Ç —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
        """
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        async with self._request_lock:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã (–∫—Ä–æ–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤)
            if not is_initial and (current_time - self._last_request_timestamp) < self._min_request_interval:
                logger.warning(f"üö´ –ó–ê–ü–†–û–° –û–¢–ö–õ–û–ù–ï–ù: —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ({current_time - self._last_request_timestamp:.1f}s)")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø–∞—É–∑—É
                if self.last_successful_response:
                    logger.info("üîÑ –í–û–ó–í–†–ê–©–ê–Æ –ü–û–°–õ–ï–î–ù–ò–ô –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢")
                    return self.last_successful_response
                else:
                    return '{"status": "pause", "response": "–ü–†–û–ì–ù–û–ó: –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –æ–∂–∏–¥–∞—é"}'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if self._request_in_progress:
                logger.warning("üö´ –ó–ê–ü–†–û–° –£–ñ–ï –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø - –û–¢–ö–õ–û–ù–Ø–Æ –î–£–ë–õ–ò–†–£–Æ–©–ò–ô")
                if self.last_successful_response:
                    return self.last_successful_response
                else:
                    return '{"status": "pause", "response": "–ü–†–û–ì–ù–û–ó: –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"}'
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            self._request_in_progress = True
            self._last_request_timestamp = current_time
            logger.info(f"üîí –ë–õ–û–ö–ò–†–û–í–ö–ê –£–°–¢–ê–ù–û–í–õ–ï–ù–ê - –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if is_initial:
                message = self._prepare_initial_message(market_data)
                logger.info("üìä –û–¢–ü–†–ê–í–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –í OPENAI")
            else:
                message = self._prepare_update_message(market_data)
                logger.info("üîÑ –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–• –í OPENAI")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –æ–Ω–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ)
            logger.debug(f"üìè –†–ê–ó–ú–ï–† –°–û–û–ë–©–ï–ù–ò–Ø: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "user",
                "content": message
            })
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": self.get_trader_prompt()}
            ] + self.conversation_history
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=0.1,
                max_tokens=500
            )
            
            assistant_response = response.choices[0].message.content
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            if response.usage:
                logger.info(f"üí∞ –¢–û–ö–ï–ù–´: input={response.usage.prompt_tokens}, output={response.usage.completion_tokens}, total={response.usage.total_tokens}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            logger.info(f"ü§ñ OPENAI –ü–û–õ–ù–´–ô –û–¢–í–ï–¢: {assistant_response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
            if not self._is_valid_response(assistant_response):
                logger.warning("üîÑ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢, –ü–†–û–ë–£–Æ –ï–©–ï –†–ê–ó...")
                # –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                clarification = "–í–ù–ò–ú–ê–ù–ò–ï! –¢–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û: pause, buy, sell, cancel. –î–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
                self.conversation_history.append({
                    "role": "user", 
                    "content": clarification
                })
                
                # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                messages = [
                    {"role": "system", "content": self.get_trader_prompt()}
                ] + self.conversation_history
                
                retry_response = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    temperature=0.1,
                    max_tokens=200
                )
                
                assistant_response = retry_response.choices[0].message.content
                logger.info(f"üîÑ –ü–û–í–¢–û–†–ù–´–ô –û–¢–í–ï–¢ OPENAI: {assistant_response}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.last_successful_response = assistant_response
            self.retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": assistant_response
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.conversation_history) > 10:
                self.conversation_history = self.conversation_history[-10:]
            
            logger.success("‚úÖ –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            return assistant_response
            
        except openai.PermissionDeniedError as e:
            if "unsupported_country_region_territory" in str(e):
                logger.error(f"üåç –û–®–ò–ë–ö–ê –†–ï–ì–ò–û–ù–ê OpenAI: {e}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ä–µ–≥–∏–æ–Ω–∞
                fallback_response = await self._handle_region_error()
                if fallback_response:
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await self._wait_and_retry()
                    return fallback_response
                else:
                    raise
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ OpenAI: {e}")
                raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –æ—Ç OpenAI: {e}")
            raise
        finally:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            self._request_in_progress = False
            logger.info("üîì –ë–õ–û–ö–ò–†–û–í–ö–ê –°–ù–Ø–¢–ê - –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _prepare_initial_message(self, market_data: MarketData) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        
        Args:
            market_data: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI
        """
        return f"""–ù–ê–ß–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:

–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {market_data.inst_id}
–í—Ä–µ–º—è: {market_data.timestamp}

–†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:
{json.dumps(market_data.market_data, ensure_ascii=False, indent=2)}

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–ê–ù–ù–´–ï:
–ë–∞–ª–∞–Ω—Å USDT: {market_data.user_data.get('balances', {}).get('USDT', 0)}
–ë–∞–ª–∞–Ω—Å BTC: {market_data.user_data.get('balances', {}).get('BTC', 0)}
–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(market_data.user_data.get('active_orders', []))}

–ò–ù–î–ò–ö–ê–¢–û–†–´:
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {market_data.indicators.get('current_price', '0')}
–û–±—ä–µ–º 24—á: {market_data.indicators.get('volume_24h', '0')}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.indicators.get('change_24h', '0')}%
–ú–∞–∫—Å–∏–º—É–º 24—á: {market_data.indicators.get('high_24h', '0')}
–ú–∏–Ω–∏–º—É–º 24—á: {market_data.indicators.get('low_24h', '0')}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    
    def _prepare_update_message(self, market_data: MarketData) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        
        Args:
            market_data: –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI
        """
        orderbook = market_data.market_data.get('orderbook', [])
        candles = market_data.market_data.get('candles', {}).get('1m', [])
        
        return f"""–û–ë–ù–û–í–õ–ï–ù–ò–ï –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•:

–í—Ä–µ–º—è: {market_data.timestamp}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:
üìä –°—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤: {len(orderbook)} –∑–∞–ø–∏—Å–µ–π
üìà –ú–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏: {len(candles)} –∑–∞–ø–∏—Å–µ–π  
üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(market_data.user_data.get('active_orders', []))} –∑–∞–ø–∏—Å–µ–π

–°–¢–ê–ö–ê–ù –û–†–î–ï–†–û–í (—Ç–æ–ø-5):
{json.dumps(orderbook[:5], ensure_ascii=False, indent=2)}

–ü–û–°–õ–ï–î–ù–ò–ï –°–í–ï–ß–ò (1m, —Ç–æ–ø-3):
{json.dumps(candles[:3], ensure_ascii=False, indent=2)}

–ë–ê–õ–ê–ù–°:
USDT: {market_data.user_data.get('balances', {}).get('USDT', 0)}
BTC: {market_data.user_data.get('balances', {}).get('BTC', 0)}

–ê–ö–¢–ò–í–ù–´–ï –û–†–î–ï–†–ê:
{json.dumps(market_data.user_data.get('active_orders', []), ensure_ascii=False, indent=2)}

–¢–ï–ö–£–©–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:
–¶–µ–Ω–∞: {market_data.indicators.get('current_price', '0')}
–û–±—ä–µ–º 24—á: {market_data.indicators.get('volume_24h', '0')}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.indicators.get('change_24h', '0')}%
–ú–∞–∫—Å–∏–º—É–º 24—á: {market_data.indicators.get('high_24h', '0')}
–ú–∏–Ω–∏–º—É–º 24—á: {market_data.indicators.get('low_24h', '0')}

–û–±–Ω–æ–≤–∏ —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–º–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –î–û–°–¢–£–ü–ù–´–• –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    
    async def send_initial_data(self, market_data: MarketData) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
        
        Args:
            market_data: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            
        Returns:
            JSON –æ—Ç–≤–µ—Ç —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
        """
        return await self.get_trading_decision(market_data, is_initial=True)
    
    async def send_update_data(self, market_data: MarketData) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.
        
        Args:
            market_data: –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            
        Returns:
            JSON –æ—Ç–≤–µ—Ç —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
        """
        return await self.get_trading_decision(market_data, is_initial=False)
    
    def get_status(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        current_time = time.time()
        time_since_last_request = current_time - self._last_request_timestamp
        
        return {
            "retry_count": self.retry_count,
            "max_retries": self.max_retries,
            "has_last_response": self.last_successful_response is not None,
            "conversation_length": len(self.conversation_history),
            "request_in_progress": self._request_in_progress,
            "time_since_last_request": round(time_since_last_request, 1),
            "min_request_interval": self._min_request_interval,
            "can_make_request": time_since_last_request >= self._min_request_interval and not self._request_in_progress
        }
    
    def reset_retry_state(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
        self.retry_count = 0
        logger.info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–±—Ä–æ—à–µ–Ω–æ")
    
    async def check_orders_decision(self, orders_data: Dict[str, Any], market_data: MarketData) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ä–¥–µ—Ä–∞–º–∏.
        
        Args:
            orders_data: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            market_data: –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            JSON –æ—Ç–≤–µ—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø–æ –æ—Ä–¥–µ—Ä–∞–º
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
            message = self._prepare_orders_check_message(orders_data, market_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "user",
                "content": message
            })
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {"role": "system", "content": self.get_orders_check_prompt()}
            ] + self.conversation_history
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=0.1,
                max_tokens=300
            )
            
            assistant_response = response.choices[0].message.content
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            logger.info(f"ü§ñ OPENAI –û–¢–í–ï–¢ –ü–û –û–†–î–ï–†–ê–ú: {assistant_response}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": assistant_response
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.conversation_history) > 10:
                self.conversation_history = self.conversation_history[-10:]
            
            return assistant_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –æ—Ä–¥–µ—Ä–∞–º –æ—Ç OpenAI: {e}")
            return '{"status": "pause", "response": "–û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –û–†–î–ï–†–û–í"}'
    
    def get_orders_check_prompt(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.
        
        Returns:
            –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
        """
        return """–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –ø–æ –ø–∞—Ä–µ BTC-USDT, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–µ BTC.

–ê–ù–ê–õ–ò–ó –û–†–î–ï–†–û–í:
1. **–í–†–ï–ú–Ø –ñ–ò–ó–ù–ò**: –û—Ä–¥–µ—Ä > 60 –º–∏–Ω—É—Ç ‚Üí –û–¢–ú–ï–ù–ò–¢–¨
2. **–û–¢–ö–õ–û–ù–ï–ù–ò–ï –¶–ï–ù–´**: –¶–µ–Ω–∞ —É—à–ª–∞ –æ—Ç –æ—Ä–¥–µ—Ä–∞ >2% ‚Üí –û–¢–ú–ï–ù–ò–¢–¨  
3. **–¢–†–ï–ù–î**: –¢—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏ ‚Üí –û–¢–ú–ï–ù–ò–¢–¨
4. **–û–ë–™–ï–ú–´**: –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ —É–ø–∞–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ ‚Üí –û–¢–ú–ï–ù–ò–¢–¨

–ö–†–ò–¢–ï–†–ò–ò –û–¢–ú–ï–ù–´:
- –û—Ä–¥–µ—Ä –≤–∏—Å–∏—Ç >60 –º–∏–Ω—É—Ç –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è
- –¶–µ–Ω–∞ —É—à–ª–∞ –æ—Ç —Ü–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –Ω–∞ >2% –≤ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
- –¢—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏
- –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ —É–ø–∞–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ

–ö–†–ò–¢–ï–†–ò–ò –ü–†–û–î–ê–ñ–ò BTC:
- –ï—Å–ª–∏ –µ—Å—Ç—å BTC –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ ‚Üí –ü–†–û–î–ê–¢–¨ –í–°–ï
- –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å USDT < 10 ‚Üí –ü–†–û–î–ê–¢–¨ –ß–ê–°–¢–¨ BTC

–î–û–ü–£–°–¢–ò–ú–´–ï –°–¢–ê–¢–£–°–´: "pause", "cancel", "sell"
–ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –°–¢–ê–¢–£–°–´: "buy", "strategy", "analysis", "hold", "wait"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –ë–ï–ó ```json``` –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

PAUSE (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å):
{{"status": "pause", "response": "–ü–†–û–ì–ù–û–ó: [–í–í–ï–†–•/–í–ù–ò–ó/–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û] - –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ"}}

CANCEL (–æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä):
{{"status": "cancel", "response": "–ü–†–û–ì–ù–û–ó: [–í–í–ï–†–•/–í–ù–ò–ó/–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û] - –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã", "order_id": "ID_–æ—Ä–¥–µ—Ä–∞"}}

SELL (–ø—Ä–æ–¥–∞—Ç—å BTC):
{{"status": "sell", "response": "–ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", "sell_amount": —á–∏—Å–ª–æ_BTC}}

–ù–ï –î–û–ë–ê–í–õ–Ø–ô –Ω–∏–∫–∞–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤! –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON!"""
    
    def _prepare_orders_check_message(self, orders_data: Dict[str, Any], market_data: MarketData) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤.
        
        Args:
            orders_data: –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            market_data: –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI
        """
        orders = orders_data.get('orders', [])
        current_time = time.time()
        current_price = float(market_data.indicators.get('current_price', 0))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        orders_info = []
        for order in orders:
            order_time = int(order.get('cTime', '0')) / 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            age_minutes = (current_time - order_time) / 60
            order_price = float(order.get('px', 0))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            if current_price > 0 and order_price > 0:
                price_deviation = ((current_price - order_price) / order_price) * 100
                price_status = "–í–´–®–ï" if price_deviation > 0 else "–ù–ò–ñ–ï"
            else:
                price_deviation = 0
                price_status = "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            order_state = order.get('state', 'N/A')
            side = order.get('side', 'N/A')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ –∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            order_type = "–ü–û–ö–£–ü–ö–ê" if side == "buy" else "–ü–†–û–î–ê–ñ–ê"
            
            orders_info.append(f"""
–û—Ä–¥–µ—Ä {order.get('ordId', 'N/A')}:
- –¢–∏–ø: {order_type}
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {order.get('instId', 'N/A')}
- –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: {order_price} USDT
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USDT
- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {price_deviation:.2f}% ({price_status})
- –†–∞–∑–º–µ—Ä: {order.get('sz', 'N/A')} BTC
- –°–æ—Å—Ç–æ—è–Ω–∏–µ: {order_state}
- –í–æ–∑—Ä–∞—Å—Ç: {age_minutes:.1f} –º–∏–Ω—É—Ç
- –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(order_time))}
""")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        indicators = market_data.indicators
        market_analysis = f"""
–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê:
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USDT
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {indicators.get('change_24h', 'N/A')}%
- –û–±—ä–µ–º 24—á: {indicators.get('volume_24h', 'N/A')}
- –ú–∞–∫—Å–∏–º—É–º 24—á: {indicators.get('high_24h', 'N/A')} USDT
- –ú–∏–Ω–∏–º—É–º 24—á: {indicators.get('low_24h', 'N/A')} USDT
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {abs(float(indicators.get('change_24h', 0))):.2f}%
"""
        
        return f"""–ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –û–†–î–ï–†–û–í:

–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}

{market_analysis}

–ê–ö–¢–ò–í–ù–´–ï –û–†–î–ï–†–ê ({len(orders)}):
{chr(10).join(orders_info) if orders_info else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"}

–¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°:
- USDT: {market_data.user_data.get('balances', {}).get('USDT', 0)}
- BTC: {market_data.user_data.get('balances', {}).get('BTC', 0)}

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ö–ê–ñ–î–´–ô –û–†–î–ï–† –û–¢–î–ï–õ–¨–ù–û:
1. –°—Ä–∞–≤–Ω–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å —Ü–µ–Ω–æ–π –æ—Ä–¥–µ—Ä–∞
2. –û—Ü–µ–Ω–∏ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ä–¥–µ—Ä–∞ –∏ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
4. –ü—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–≤–∏—Ç—å, –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è."""
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."""
        logger.info("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π OpenAI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
