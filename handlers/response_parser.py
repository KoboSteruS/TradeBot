"""–ü–∞—Ä—Å–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç OpenAI."""
import json
import re
from typing import Union, Dict, Any
from loguru import logger

from models.responses import (
    OpenAIResponse, 
    BuyDecision, 
    SellDecision, 
    CancelDecision, 
    PauseDecision
)
from models.trading import TradingStatus


class ResponseParseError(Exception):
    """–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞."""
    pass


class ResponseParser:
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç OpenAI.
    
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –æ—Ç–≤–µ—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏.
    """
    
    @staticmethod
    def clean_json_response(response_text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON.
        
        Args:
            response_text: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π JSON —Ç–µ–∫—Å—Ç
        """
        # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞
        response_text = re.sub(r'```json\s*', '', response_text)
        response_text = re.sub(r'```\s*', '', response_text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        response_text = response_text.strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
        if json_match:
            response_text = json_match.group(0)
        
        return response_text
    
    @staticmethod
    def parse_response(response_text: str) -> Union[BuyDecision, SellDecision, CancelDecision, PauseDecision]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å —Ä–µ—à–µ–Ω–∏—è.
        
        Args:
            response_text: JSON –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            
        Returns:
            –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
            
        Raises:
            ResponseParseError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            cleaned_text = ResponseParser.clean_json_response(response_text)
            logger.info(f"üìù –°–´–†–û–ô –û–¢–í–ï–¢: {response_text}")
            logger.info(f"üßπ –û–ß–ò–©–ï–ù–ù–´–ô JSON: {cleaned_text}")
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                data = json.loads(cleaned_text)
                logger.info(f"‚úÖ –†–ê–°–ü–ê–†–°–ï–ù–ù–´–ô JSON: {json.dumps(data, ensure_ascii=False, indent=2)}")
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON: {e}")
                raise ResponseParseError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not isinstance(data, dict):
                raise ResponseParseError("–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º")
            
            if 'status' not in data:
                raise ResponseParseError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'status' –≤ –æ—Ç–≤–µ—Ç–µ")
            
            if 'response' not in data:
                raise ResponseParseError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'response' –≤ –æ—Ç–≤–µ—Ç–µ")
            
            status = data['status'].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            valid_statuses = [TradingStatus.PAUSE, TradingStatus.BUY, TradingStatus.SELL, TradingStatus.CANCEL]
            if status not in valid_statuses:
                logger.warning(f"üö® –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –°–¢–ê–¢–£–° '{status}' -> –ò–°–ü–†–ê–í–õ–Ø–Æ –ù–ê 'pause'")
                original_status = data['status']
                status = TradingStatus.PAUSE
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                data['status'] = status
                data['response'] = f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{original_status}' –Ω–∞ pause. " + str(data.get('response', ''))
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
            if status == TradingStatus.PAUSE:
                decision = PauseDecision(**data)
                logger.info(f"‚è∏Ô∏è  –†–ï–®–ï–ù–ò–ï –ü–ê–£–ó–ê: {decision.response}")
                return decision
            
            elif status == TradingStatus.BUY:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                required_fields = ['buy_amount', 'take_profit_percent', 'stop_loss_percent']
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    raise ResponseParseError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {missing_fields}")
                
                decision = BuyDecision(**data)
                logger.info(f"üìà –†–ï–®–ï–ù–ò–ï –ü–û–ö–£–ü–ö–ê: {decision.buy_amount} USDT, TP: {decision.take_profit_percent}%, SL: {decision.stop_loss_percent}% | {decision.response}")
                return decision
            
            elif status == TradingStatus.SELL:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                if 'sell_amount' not in data:
                    raise ResponseParseError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'sell_amount' –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ")
                
                decision = SellDecision(**data)
                logger.info(f"üìâ –†–ï–®–ï–ù–ò–ï –ü–†–û–î–ê–ñ–ê: {decision.sell_amount} BTC | {decision.response}")
                return decision
            
            elif status == TradingStatus.CANCEL:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
                if 'order_id' not in data:
                    raise ResponseParseError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'order_id' –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ")
                
                decision = CancelDecision(**data)
                logger.info(f"‚ùå –†–ï–®–ï–ù–ò–ï –û–¢–ú–ï–ù–ê: –æ—Ä–¥–µ—Ä {decision.order_id} | {decision.response}")
                return decision
            
            else:
                raise ResponseParseError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                
        except ResponseParseError:
            raise
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            logger.error(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {response_text}")
            raise ResponseParseError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    @staticmethod
    def validate_decision(decision: Union[BuyDecision, SellDecision, CancelDecision, PauseDecision]) -> bool:
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
        
        Args:
            decision: –†–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            if isinstance(decision, BuyDecision):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                if decision.buy_amount <= 0:
                    logger.error("–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                    return False
                
                if decision.take_profit_percent <= 0 or decision.take_profit_percent > 100:
                    logger.error("Take Profit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 100%")
                    return False
                
                if decision.stop_loss_percent <= 0 or decision.stop_loss_percent > 100:
                    logger.error("Stop Loss –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 100%")
                    return False
                
                # Take Profit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ Stop Loss
                if decision.take_profit_percent <= decision.stop_loss_percent:
                    logger.error("Take Profit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ Stop Loss")
                    return False
            
            elif isinstance(decision, SellDecision):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                if decision.sell_amount <= 0:
                    logger.error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                    return False
            
            elif isinstance(decision, CancelDecision):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –æ—Ä–¥–µ—Ä–∞
                if not decision.order_id or not decision.order_id.strip():
                    logger.error("ID –æ—Ä–¥–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return False
            
            # PauseDecision –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            
            logger.debug(f"–†–µ—à–µ–Ω–∏–µ {type(decision).__name__} –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    def parse_and_validate(response_text: str) -> Union[BuyDecision, SellDecision, CancelDecision, PauseDecision]:
        """
        –ü–∞—Ä—Å–∏—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.
        
        Args:
            response_text: JSON –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            
        Returns:
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            
        Raises:
            ResponseParseError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        decision = ResponseParser.parse_response(response_text)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if not ResponseParser.validate_decision(decision):
            raise ResponseParseError("–†–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—à–µ–Ω–∏–µ: {decision.status}")
        return decision
    
    @staticmethod
    def decision_to_api_payload(
        decision: Union[BuyDecision, SellDecision, CancelDecision, PauseDecision]
    ) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –≤ –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è API.
        
        Args:
            decision: –¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è API
        """
        if isinstance(decision, BuyDecision):
            return {
                "action": "buy",
                "buy_amount": decision.buy_amount,
                "take_profit_percent": decision.take_profit_percent,
                "stop_loss_percent": decision.stop_loss_percent
            }
        
        elif isinstance(decision, SellDecision):
            return {
                "action": "sell",
                "sell_amount": decision.sell_amount
            }
        
        elif isinstance(decision, CancelDecision):
            return {
                "action": "cancel",
                "order_id": decision.order_id
            }
        
        elif isinstance(decision, PauseDecision):
            return {
                "action": "pause"
            }
        
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ—à–µ–Ω–∏—è: {type(decision)}")
