"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞."""
import asyncio
import time
from typing import Optional
from loguru import logger

from config.settings import Settings
from services import TradingAPIClient, TelegramNotifier
from services.openai_simple_handler import OpenAISimpleHandler
from handlers import ResponseParser
from models.trading import MarketData
from models.responses import BuyDecision, SellDecision, CancelDecision, PauseDecision, OrdersCancelDecision, OrdersSellDecision, TradingDecision, OrdersDecision
from utils import setup_logger, log_trading_decision, log_api_call, log_openai_interaction


class TradingBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å API –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π.
    """
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.settings = settings
        self.api_client: Optional[TradingAPIClient] = None
        self.openai_handler: Optional[OpenAISimpleHandler] = None
        self.telegram_notifier: Optional[TelegramNotifier] = None
        self.parser = ResponseParser()
        self.is_initialized = False
        self.is_running = False
        
        # –¢–∞–π–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
        self.last_orders_check = 0
        self.orders_check_interval = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_logger(settings)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞."""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
            self.api_client = TradingAPIClient(self.settings)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
            if not await self.api_client.test_connection():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É API")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.openai_handler = OpenAISimpleHandler(self.settings)
            await self.openai_handler.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.telegram_notifier = TelegramNotifier(self.settings)
            if not await self.telegram_notifier.test_connection():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            else:
                logger.success("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            
            self.is_initialized = True
            logger.success("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            await self.cleanup()
            raise
    
    async def send_initial_data(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ OpenAI."""
        try:
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 3 –º–µ—Å—è—Ü–∞
            start_time = time.time()
            market_data = await self.api_client.get_market_analytics()
            response_time = time.time() - start_time
            
            log_api_call("/api/v1/market/analytics", "GET", 200, response_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ OpenAI
            start_time = time.time()
            response = await self.openai_handler.send_initial_data(market_data)
            response_time = time.time() - start_time
            
            log_openai_interaction("initial", len(response), response_time)
            
            # –ü–∞—Ä—Å–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            decision = self.parser.parse_and_validate(response)
            await self.execute_decision(decision, market_data)
            
            logger.success("–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def check_orders_cycle(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç."""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ—Ä–¥–µ—Ä–∞
            if current_time - self.last_orders_check < self.orders_check_interval:
                return
            
            logger.info("üîÑ –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –û–†–î–ï–†–û–í")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            start_time = time.time()
            orders_data = await self.api_client.get_orders()
            response_time = time.time() - start_time
            
            log_api_call("/api/v1/orders", "GET", 200, response_time)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self.api_client.get_market_monitor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Ç OpenAI –ø–æ –æ—Ä–¥–µ—Ä–∞–º
            start_time = time.time()
            response = await self.openai_handler.check_orders_decision(orders_data, market_data)
            response_time = time.time() - start_time
            
            log_openai_interaction("orders_check", len(response), response_time)
            
            # –ü–∞—Ä—Å–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
            decision = self.parser.parse_orders_decision(response)
            await self.execute_orders_decision(decision)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_orders_check = current_time
            logger.success("‚úÖ –ü–†–û–í–ï–†–ö–ê –û–†–î–ï–†–û–í –ó–ê–í–ï–†–®–ï–ù–ê")
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –û–†–î–ï–†–û–í: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
    
    async def trading_cycle(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç."""
        try:
            logger.debug("–ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å OpenAI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            status = self.openai_handler.get_status()
            logger.info(f"üìä –°–¢–ê–¢–£–° OPENAI: –ø–æ–ø—ã—Ç–∫–∏ {status['retry_count']}/{status['max_retries']}, –∏—Å—Ç–æ—Ä–∏—è: {status['conversation_length']} —Å–æ–æ–±—â–µ–Ω–∏–π")
            logger.info(f"üîí –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –∞–∫—Ç–∏–≤–µ–Ω={status['request_in_progress']}, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å {status['time_since_last_request']}s –Ω–∞–∑–∞–¥, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å={status['can_make_request']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            start_time = time.time()
            market_data = await self.api_client.get_market_monitor()
            response_time = time.time() - start_time
            
            log_api_call("/api/v1/market/monitor", "GET", 200, response_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ OpenAI
            start_time = time.time()
            response = await self.openai_handler.send_update_data(market_data)
            response_time = time.time() - start_time
            
            log_openai_interaction("update", len(response), response_time)
            
            # –ü–∞—Ä—Å–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            decision = self.parser.parse_and_validate(response)
            await self.execute_decision(decision, market_data)
            
            logger.debug("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            if "validation errors for MarketData" in str(e):
                logger.error(f"üìä –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•: {e}")
                logger.info("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –∏–∑–º–µ–Ω–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/v1/market/monitor")
            else:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–û–†–ì–û–í–û–ú –¶–ò–ö–õ–ï: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
    
    async def execute_decision(
        self, 
        decision: BuyDecision | SellDecision | CancelDecision | PauseDecision,
        market_data: MarketData
    ) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
        
        Args:
            decision: –†–µ—à–µ–Ω–∏–µ –æ—Ç OpenAI
            market_data: –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            if isinstance(decision, PauseDecision):
                log_trading_decision("pause", decision.response)
                logger.info(f"–ü–ê–£–ó–ê: {decision.response}")
            
            elif isinstance(decision, BuyDecision):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
                current_balance = market_data.user_data.get('balances', {}).get('USDT', 0)
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ 10 USDT
                if decision.buy_amount < 10:
                    logger.warning(f"‚ö†Ô∏è –°–õ–ò–®–ö–û–ú –ú–ê–õ–ê–Ø –°–î–ï–õ–ö–ê: {decision.buy_amount} USDT < 10 USDT –º–∏–Ω–∏–º—É–º–∞")
                    log_trading_decision("pause", f"–°–ª–∏—à–∫–æ–º –º–∞–ª–∞—è —Å–¥–µ–ª–∫–∞: {decision.buy_amount} USDT < 10 USDT –º–∏–Ω–∏–º—É–º–∞")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if current_balance < decision.buy_amount:
                    logger.warning(f"‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í: —Ç—Ä–µ–±—É–µ—Ç—Å—è {decision.buy_amount} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ {current_balance} USDT")
                    log_trading_decision("pause", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: —Ç—Ä–µ–±—É–µ—Ç—Å—è {decision.buy_amount} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ {current_balance} USDT")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º 30-40 USDT)
                reserve_needed = 35  # —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤
                available_for_trading = current_balance - reserve_needed
                
                if decision.buy_amount > available_for_trading:
                    logger.warning(f"‚ö†Ô∏è –ù–ê–†–£–®–ï–ù–ò–ï –†–ï–ó–ï–†–í–ê: —Å–¥–µ–ª–∫–∞ {decision.buy_amount} USDT –æ—Å—Ç–∞–≤–∏—Ç –º–µ–Ω—å—à–µ {reserve_needed} USDT —Ä–µ–∑–µ—Ä–≤–∞")
                    log_trading_decision("pause", f"–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞: —Å–¥–µ–ª–∫–∞ {decision.buy_amount} USDT –æ—Å—Ç–∞–≤–∏—Ç –º–µ–Ω—å—à–µ {reserve_needed} USDT —Ä–µ–∑–µ—Ä–≤–∞")
                    return
                
                log_trading_decision(
                    "buy", 
                    f"–°—É–º–º–∞: {decision.buy_amount} USDT, TP: {decision.take_profit_percent}%, SL: {decision.stop_loss_percent}%"
                )
                
                result = await self.api_client.place_buy_order(
                    decision.buy_amount,
                    decision.take_profit_percent,
                    decision.stop_loss_percent
                )
                
                logger.success(f"–ü–û–ö–£–ü–ö–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
                if self.telegram_notifier:
                    try:
                        current_price = market_data.indicators.get('current_price', 'N/A')
                        await self.telegram_notifier.notify_buy_order(
                            decision.buy_amount,
                            decision.take_profit_percent,
                            decision.stop_loss_percent,
                            current_price,
                            decision.response
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {e}")
            
            elif isinstance(decision, SellDecision):
                log_trading_decision("sell", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {decision.sell_amount} BTC")
                
                result = await self.api_client.place_sell_order(decision.sell_amount)
                logger.success(f"–ü–†–û–î–ê–ñ–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
            
            elif isinstance(decision, CancelDecision):
                log_trading_decision("cancel", f"–û—Ä–¥–µ—Ä ID: {decision.order_id}")
                
                result = await self.api_client.cancel_order(decision.order_id)
                logger.success(f"–û–¢–ú–ï–ù–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è {type(decision).__name__}: {e}")
            raise
    
    async def execute_orders_decision(self, decision: OrdersDecision) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ä–¥–µ—Ä–∞–º–∏.
        
        Args:
            decision: –†–µ—à–µ–Ω–∏–µ –æ—Ç OpenAI –ø–æ –æ—Ä–¥–µ—Ä–∞–º
        """
        try:
            if isinstance(decision, PauseDecision):
                log_trading_decision("orders_pause", decision.response)
                logger.info(f"–û–†–î–ï–†–ê –ü–ê–£–ó–ê: {decision.response}")
            
            elif isinstance(decision, OrdersCancelDecision):
                log_trading_decision("orders_cancel", f"–û—Ä–¥–µ—Ä: {decision.order_id} - {decision.response}")
                
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                result = await self.api_client.cancel_order_by_inst_id("BTC-USDT", decision.order_id)
                
                logger.success(f"–û–¢–ú–ï–ù–ê –û–†–î–ï–†–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
                if self.telegram_notifier:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        orders_data = await self.api_client.get_orders()
                        order_details = None
                        
                        for order in orders_data.get('orders', []):
                            if order.get('ordId') == decision.order_id:
                                order_details = order
                                break
                        
                        await self.telegram_notifier.notify_cancel_order(
                            decision.order_id,
                            decision.response,
                            order_details
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
                
                # –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–¥–∞–µ–º BTC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await self._handle_post_cancel_actions()
            
            elif isinstance(decision, OrdersSellDecision):
                log_trading_decision("orders_sell", f"–ü—Ä–æ–¥–∞–∂–∞: {decision.sell_amount or '–≤—Å–µ'} BTC - {decision.response}")
                
                if decision.sell_amount is None:
                    # –ü—Ä–æ–¥–∞–µ–º –≤–µ—Å—å BTC
                    result = await self.api_client.sell_all_btc()
                else:
                    # –ü—Ä–æ–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    result = await self.api_client.place_sell_order(decision.sell_amount)
                
                logger.success(f"–ü–†–û–î–ê–ñ–ê –û–†–î–ï–†–ê –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ—à–µ–Ω–∏—è –ø–æ –æ—Ä–¥–µ—Ä–∞–º: {type(decision)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –æ—Ä–¥–µ—Ä–∞–º: {e}")
    
    async def _handle_post_cancel_actions(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            market_data = await self.api_client.get_market_monitor()
            btc_balance = market_data.user_data.get('balances', {}).get('BTC', 0)
            
            if btc_balance > 0:
                logger.info(f"üí∞ –ü–û–°–õ–ï –û–¢–ú–ï–ù–´ –û–†–î–ï–†–ê: –µ—Å—Ç—å {btc_balance} BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                
                # –ü—Ä–æ–¥–∞–µ–º –≤–µ—Å—å BTC
                result = await self.api_client.sell_all_btc()
                logger.success(f"–ü–†–û–î–ê–ñ–ê –ü–û–°–õ–ï –û–¢–ú–ï–ù–´: {result}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
                if self.telegram_notifier:
                    try:
                        await self.telegram_notifier.notify_sell_after_cancel(
                            btc_balance,
                            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ BTC –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {e}")
            else:
                logger.info("üí∞ –ü–û–°–õ–ï –û–¢–ú–ï–ù–´ –û–†–î–ï–†–ê: –Ω–µ—Ç BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {e}")
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞."""
        if not self.is_initialized:
            raise RuntimeError("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.")
        
        self.is_running = True
        logger.info("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.send_initial_data()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                    await self.check_orders_cycle()
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    await self.trading_cycle()
                    
                    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (5 –º–∏–Ω—É—Ç)
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.settings.update_interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
                    await asyncio.sleep(self.settings.update_interval)
                    
                except KeyboardInterrupt:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    break
                except Exception as e:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(60)
        
        finally:
            self.is_running = False
            await self.cleanup()
            logger.info("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞."""
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
        self.is_running = False
    
    async def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        try:
            if self.api_client:
                await self.api_client.close()
            if self.telegram_notifier:
                await self.telegram_notifier.close()
            logger.info("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from config.settings import settings
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = TradingBot(settings)
        await bot.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
